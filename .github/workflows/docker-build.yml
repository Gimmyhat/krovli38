name: Docker Build and Deploy

on:
  push:
    branches: [ main, feature/* ]
  pull_request:
    branches: [ main ]

env:
  DOCKER_HUB_USERNAME: gimmyhat
  FRONTEND_IMAGE: gimmyhat/krovli38-frontend
  ADMIN_IMAGE: gimmyhat/krovli38-admin
  SERVER_IMAGE: gimmyhat/krovli38-server
  VITE_CLOUDINARY_CLOUD_NAME: dr0hjlr79
  VITE_CLOUDINARY_API_KEY: 586934817968136
  VITE_CLOUDINARY_UPLOAD_PRESET: krovli38_preset
  CLOUDINARY_CLOUD_NAME: dr0hjlr79
  CLOUDINARY_API_KEY: 586934817968136
  CLOUDINARY_API_SECRET: ${{ secrets.CLOUDINARY_API_SECRET }}

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # ВАЖНО: Необходимо добавить секрет DOCKER_HUB_ACCESS_TOKEN в настройках репозитория
      # Settings -> Secrets and variables -> Actions -> New repository secret
      # Имя: DOCKER_HUB_ACCESS_TOKEN, Значение: токен доступа Docker Hub
      # Временно отключаем push в Docker Hub, чтобы CI/CD мог выполниться для проверки
      # - name: Login to Docker Hub
      #   uses: docker/login-action@v3
      #   with:
      #     username: ${{ env.DOCKER_HUB_USERNAME }}
      #     password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      - name: Build Frontend (without push)
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          file: ./docker/frontend/Dockerfile
          push: false
          tags: ${{ env.FRONTEND_IMAGE }}:latest
          build-args: |
            VITE_CLOUDINARY_CLOUD_NAME=${{ env.VITE_CLOUDINARY_CLOUD_NAME }}
            VITE_CLOUDINARY_API_KEY=${{ env.VITE_CLOUDINARY_API_KEY }}
            VITE_CLOUDINARY_UPLOAD_PRESET=${{ env.VITE_CLOUDINARY_UPLOAD_PRESET }}

      - name: Build Admin Panel (without push)
        uses: docker/build-push-action@v5
        with:
          context: ./admin-panel
          file: ./docker/admin/Dockerfile
          push: false
          tags: ${{ env.ADMIN_IMAGE }}:latest
          build-args: |
            VITE_CLOUDINARY_CLOUD_NAME=${{ env.VITE_CLOUDINARY_CLOUD_NAME }}
            VITE_CLOUDINARY_API_KEY=${{ env.VITE_CLOUDINARY_API_KEY }}
            VITE_CLOUDINARY_UPLOAD_PRESET=${{ env.VITE_CLOUDINARY_UPLOAD_PRESET }}

      - name: Build Server (without push)
        uses: docker/build-push-action@v5
        with:
          context: ./server
          file: ./docker/server/Dockerfile
          push: false
          tags: ${{ env.SERVER_IMAGE }}:latest
          build-args: |
            CLOUDINARY_CLOUD_NAME=${{ env.CLOUDINARY_CLOUD_NAME }}
            CLOUDINARY_API_KEY=${{ env.CLOUDINARY_API_KEY }}
            CLOUDINARY_API_SECRET=${{ env.CLOUDINARY_API_SECRET }}

      # Этот шаг также отключен, так как нам нужно сначала настроить секреты
      # - name: Deploy to Production
      #   if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/heads/feature/')
      #   uses: appleboy/ssh-action@v1.0.0
      #   with:
      #     host: krovlya38.pro
      #     username: root
      #     key: ${{ secrets.SSH_PRIVATE_KEY }}
      #     script: |
      #       # Создаем необходимые директории
      #       mkdir -p /root/krovli38
      #       mkdir -p /root/krovli38/certbot/www
      #       mkdir -p /root/krovli38/certbot/conf
      #       mkdir -p /root/krovli38/nginx/logs
      # 
      #       # Создаем директорию для бэкапов если её нет
      #       mkdir -p /root/krovli38/db_backups
      # 
      #       # Создаем бэкап базы данных перед обновлением
      #       echo "Creating database backup..."
      #       BACKUP_NAME="backup_$(date +%Y%m%d_%H%M%S).gz"
      #       if docker compose -f /root/krovli38/docker-compose.yml ps | grep -q mongodb; then
      #         echo "MongoDB container found, creating backup..."
      #         docker compose -f /root/krovli38/docker-compose.yml exec -T mongodb mongodump --uri="mongodb://admin:admin_password@localhost:27017/krovli38?authSource=admin" --archive --gzip > "/root/krovli38/db_backups/$BACKUP_NAME" || echo "Failed to create backup"
      #       else
      #         echo "No MongoDB container running, skipping backup"
      #       fi
      # 
      #       # Останавливаем старые контейнеры
      #       echo "Stopping old containers..."
      #       cd /root/krovli38
      #       docker compose down
      # 
      #       # Обновляем переменные окружения
      #       echo "DOCKER_HUB_USERNAME=gimmyhat" > .env
      #       echo "VITE_CLOUDINARY_CLOUD_NAME=dr0hjlr79" >> .env
      #       echo "VITE_CLOUDINARY_API_KEY=586934817968136" >> .env
      #       echo "VITE_CLOUDINARY_UPLOAD_PRESET=krovli38_preset" >> .env
      #       echo "CLOUDINARY_CLOUD_NAME=dr0hjlr79" >> .env
      #       echo "CLOUDINARY_API_KEY=586934817968136" >> .env
      #       echo "CLOUDINARY_API_SECRET=" >> .env
      # 
      #       # Подтягиваем новые образы
      #       echo "Pulling new images..."
      #       docker compose pull
      # 
      #       # Запускаем MongoDB отдельно и ждем её готовности
      #       echo "Starting MongoDB..."
      #       docker compose up -d mongodb
      #       echo "Waiting for MongoDB to be ready..."
      #       for i in {1..30}; do
      #         if docker compose exec -T mongodb mongosh --eval "db.adminCommand('ping')" --quiet > /dev/null 2>&1; then
      #           echo "MongoDB is ready"
      #           break
      #         fi
      #         if [ $i -eq 30 ]; then
      #           echo "MongoDB failed to start"
      #           exit 1
      #         fi
      #         echo "Waiting for MongoDB... ($i/30)"
      #         sleep 2
      #       done
      # 
      #       # Запускаем остальные контейнеры
      #       echo "Starting other containers..."
      #       docker compose up -d
      # 
      #       # Проверяем здоровье сервисов
      #       echo "Checking services health..."
      #       for i in {1..60}; do
      #         if curl -s http://localhost/api/health > /dev/null; then
      #           echo "API is responding"
      #           break
      #         fi
      #         if [ $i -eq 60 ]; then
      #           echo "API failed to respond"
      #           echo "Checking container logs..."
      #           docker compose logs backend
      #           
      #           # Проверяем статус контейнеров
      #           echo "Container status:"
      #           docker compose ps
      #           
      #           # Восстанавливаем из бэкапа в случае проблем
      #           if [ -f "db_backups/$BACKUP_NAME" ]; then
      #             echo "Restoring from backup $BACKUP_NAME"
      #             docker compose down
      #             docker compose up -d mongodb
      #             sleep 30
      #             docker compose exec -T mongodb mongorestore --uri="mongodb://admin:admin_password@localhost:27017/krovli38?authSource=admin" --archive --gzip < "db_backups/$BACKUP_NAME"
      #             docker compose up -d
      #           else
      #             echo "No backup file found for restoration"
      #           fi
      #           exit 1
      #         fi
      #         echo "Waiting for API... ($i/60)"
      #         sleep 2
      #       done
      # 
      #       # Проверяем и инициализируем админа
      #       echo "Checking admin user..."
      #       docker compose exec -T backend node dist/scripts/checkAdmin.js || docker compose exec -T backend node dist/scripts/createAdmin.js
      # 
      #       # Очистка старых образов
      #       docker system prune -f
      # 
      #       # Удаляем старые бэкапы (оставляем последние 5)
      #       cd /root/krovli38/db_backups && ls -t | tail -n +6 | xargs -r rm -- 