name: Docker Build and Deploy

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  DOCKER_HUB_USERNAME: gimmyhat
  FRONTEND_IMAGE: gimmyhat/krovli38-frontend
  ADMIN_IMAGE: gimmyhat/krovli38-admin
  SERVER_IMAGE: gimmyhat/krovli38-server
  VITE_CLOUDINARY_CLOUD_NAME: dr0hjlr79
  VITE_CLOUDINARY_API_KEY: 586934817968136
  VITE_CLOUDINARY_UPLOAD_PRESET: krovli38_preset
  CLOUDINARY_CLOUD_NAME: dr0hjlr79
  CLOUDINARY_API_KEY: 586934817968136
  CLOUDINARY_API_SECRET: ${{ secrets.CLOUDINARY_API_SECRET }}

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ env.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push frontend
        uses: docker/build-push-action@v5
        with:
          context: .
          file: docker/frontend/Dockerfile
          push: true
          tags: ${{ env.FRONTEND_IMAGE }}:latest
          cache-from: type=registry,ref=${{ env.FRONTEND_IMAGE }}:buildcache
          cache-to: type=registry,ref=${{ env.FRONTEND_IMAGE }}:buildcache,mode=max

      - name: Build and push admin panel
        uses: docker/build-push-action@v5
        with:
          context: .
          file: docker/admin/Dockerfile
          push: true
          tags: ${{ env.ADMIN_IMAGE }}:latest
          build-args: |
            VITE_CLOUDINARY_CLOUD_NAME=${{ env.VITE_CLOUDINARY_CLOUD_NAME }}
            VITE_CLOUDINARY_API_KEY=${{ env.VITE_CLOUDINARY_API_KEY }}
            VITE_CLOUDINARY_UPLOAD_PRESET=${{ env.VITE_CLOUDINARY_UPLOAD_PRESET }}
          cache-from: type=registry,ref=${{ env.ADMIN_IMAGE }}:buildcache
          cache-to: type=registry,ref=${{ env.ADMIN_IMAGE }}:buildcache,mode=max

      - name: Build and push server
        uses: docker/build-push-action@v5
        with:
          context: .
          file: docker/server/Dockerfile
          push: true
          tags: ${{ env.SERVER_IMAGE }}:latest
          build-args: |
            NODE_ENV=production
            CLOUDINARY_CLOUD_NAME=${{ env.CLOUDINARY_CLOUD_NAME }}
            CLOUDINARY_API_KEY=${{ env.CLOUDINARY_API_KEY }}
            CLOUDINARY_API_SECRET=${{ env.CLOUDINARY_API_SECRET }}
          cache-from: type=registry,ref=${{ env.SERVER_IMAGE }}:buildcache
          cache-to: type=registry,ref=${{ env.SERVER_IMAGE }}:buildcache,mode=max

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Copy files to server
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USERNAME }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          source: "docker/docker-compose.yml,docker/nginx/,server/src/scripts/"
          target: "/root/krovli38"
          strip_components: 1

      - name: Deploy to server
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USERNAME }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          script: |
            cd /root/krovli38
            
            # Создаем директорию для бэкапов если её нет
            mkdir -p db_backups
            
            # Создаем бэкап базы данных перед обновлением
            echo "Creating database backup..."
            BACKUP_NAME="backup_$(date +%Y%m%d_%H%M%S).gz"
            docker compose exec -T mongodb mongodump --uri="mongodb://admin:admin_password@localhost:27017/krovli38?authSource=admin" --archive --gzip > "db_backups/$BACKUP_NAME"
            
            # Останавливаем старые контейнеры
            echo "Stopping old containers..."
            docker compose down
            
            # Обновляем переменные окружения
            echo "DOCKER_HUB_USERNAME=${{ env.DOCKER_HUB_USERNAME }}" > .env
            echo "VITE_CLOUDINARY_CLOUD_NAME=${{ env.VITE_CLOUDINARY_CLOUD_NAME }}" >> .env
            echo "VITE_CLOUDINARY_API_KEY=${{ env.VITE_CLOUDINARY_API_KEY }}" >> .env
            echo "VITE_CLOUDINARY_UPLOAD_PRESET=${{ env.VITE_CLOUDINARY_UPLOAD_PRESET }}" >> .env
            echo "CLOUDINARY_CLOUD_NAME=${{ env.CLOUDINARY_CLOUD_NAME }}" >> .env
            echo "CLOUDINARY_API_KEY=${{ env.CLOUDINARY_API_KEY }}" >> .env
            echo "CLOUDINARY_API_SECRET=${{ secrets.CLOUDINARY_API_SECRET }}" >> .env
            
            # Подтягиваем новые образы
            echo "Pulling new images..."
            docker compose pull
            
            # Запускаем контейнеры
            echo "Starting new containers..."
            docker compose up -d
            
            # Ждем, пока MongoDB будет готова
            echo "Waiting for MongoDB to be ready..."
            sleep 10
            
            # Проверяем и инициализируем админа
            echo "Checking admin user..."
            docker compose exec -T server node dist/scripts/checkAdmin.js || docker compose exec -T server node dist/scripts/createAdmin.js
            
            # Проверяем здоровье сервисов
            echo "Checking services health..."
            for i in {1..30}; do
              if curl -s http://localhost/api > /dev/null; then
                echo "API is responding"
                break
              fi
              if [ $i -eq 30 ]; then
                echo "API failed to respond"
                # Восстанавливаем из бэкапа в случае проблем
                docker compose down
                docker compose up -d mongodb
                sleep 10
                mongorestore --uri="mongodb://admin:admin_password@localhost:27017/krovli38?authSource=admin" --archive --gzip < "db_backups/$BACKUP_NAME"
                docker compose up -d
                exit 1
              fi
              echo "Waiting for API... ($i/30)"
              sleep 2
            done
            
            # Очистка старых образов
            docker system prune -f
            
            # Удаляем старые бэкапы (оставляем последние 5)
            cd db_backups && ls -t | tail -n +6 | xargs -r rm --

      - name: Set up SSH
        uses: webfactory/ssh-agent@v0.5.4
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Add server to known hosts
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -H ${{ secrets.SERVER_IP }} >> ~/.ssh/known_hosts

      - name: Deploy to server
        run: |
          scp -r docker/* ${{ secrets.SSH_USER }}@${{ secrets.SERVER_IP }}:/home/${{ secrets.SSH_USER }}/krovli38/docker/
          ssh ${{ secrets.SSH_USER }}@${{ secrets.SERVER_IP }} "cd /home/${{ secrets.SSH_USER }}/krovli38 && git pull && chmod +x docker/init-letsencrypt.sh && docker/init-letsencrypt.sh && docker-compose -f docker/docker-compose.yml up -d --build" 